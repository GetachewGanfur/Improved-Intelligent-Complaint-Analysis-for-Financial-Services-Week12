#!/usr/bin/env python3
"""
Script to create the interactive chat interface notebook
"""

import json

# Notebook structure
notebook = {
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Task 4: Interactive Chat Interface\n",
                "\n",
                "This notebook demonstrates the interactive chat interface for the Financial Complaint Analysis RAG System.\n",
                "\n",
                "## üéØ Learning Objectives\n",
                "- Understand the chat interface architecture\n",
                "- Learn how to interact with the RAG system\n",
                "- Explore different response formats and configurations\n",
                "- Test the system with various types of questions\n",
                "\n",
                "## üèóÔ∏è Architecture Overview\n",
                "\n",
                "The chat interface consists of several key components:\n",
                "1. **ChatSession**: Manages conversation state and history\n",
                "2. **ResponseFormatter**: Formats RAG responses for display\n",
                "3. **ChatInterface**: Main interface controller\n",
                "4. **StreamingHandler**: Handles response streaming (optional)\n",
                "\n",
                "## üöÄ Features\n",
                "- Real-time chat with the RAG system\n",
                "- Source citation and confidence scoring\n",
                "- Session management and history\n",
                "- Multiple response formats\n",
                "- Interactive configuration options"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Import required libraries\n",
                "import sys\n",
                "import os\n",
                "import time\n",
                "import warnings\n",
                "from datetime import datetime\n",
                "warnings.filterwarnings('ignore')\n",
                "\n",
                "# Add src to path for imports\n",
                "sys.path.append(\"../src\")\n",
                "\n",
                "print(\"‚úÖ Libraries imported successfully!\")\n",
                "print(f\"üìÅ Current directory: {os.getcwd()}\")\n",
                "print(f\"üêç Python version: {sys.version}\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## üîç Check System Setup\n",
                "\n",
                "Let's verify that all required components are available."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Check if src directory exists and contains required files\n",
                "src_path = \"../src\"\n",
                "if os.path.exists(src_path):\n",
                "    print(f\"‚úÖ Source directory found: {src_path}\")\n",
                "    src_files = os.listdir(src_path)\n",
                "    print(f\"üìÅ Files in src/: {src_files}\")\n",
                "    \n",
                "    # Check for key components\n",
                "    required_files = ['chat_interface.py', 'rag_pipeline.py', 'ui_app.py']\n",
                "    missing_files = [f for f in required_files if f not in src_files]\n",
                "    \n",
                "    if missing_files:\n",
                "        print(f\"‚ö†Ô∏è Missing files: {missing_files}\")\n",
                "    else:\n",
                "        print(\"‚úÖ All required chat interface components found!\")\n",
                "else:\n",
                "    print(f\"‚ùå Source directory not found: {src_path}\")\n",
                "    print(\"Please ensure you're running this notebook from the correct location.\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## üìö Import Chat Interface Components\n",
                "\n",
                "Now let's import the chat interface components safely."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Try to import chat interface components with proper error handling\n",
                "try:\n",
                "    from chat_interface import ChatSession, ChatMessage, GradioResponseFormatter\n",
                "    print(\"‚úÖ Chat interface components imported successfully!\")\n",
                "except ImportError as e:\n",
                "    print(f\"‚ùå Import Error for Chat Interface: {e}\")\n",
                "    print(\"üîç This might be because:\")\n",
                "    print(\"   1. The chat_interface.py file doesn't exist\")\n",
                "    print(\"   2. There are missing dependencies\")\n",
                "    print(\"   3. Import path issues\")\n",
                "except Exception as e:\n",
                "    print(f\"‚ùå Unexpected error: {e}\")\n",
                "\n",
                "try:\n",
                "    from ui_app import ChatInterface\n",
                "    print(\"‚úÖ Streamlit UI components imported successfully!\")\n",
                "except ImportError as e:\n",
                "    print(f\"‚ùå Import Error for UI App: {e}\")\n",
                "except Exception as e:\n",
                "    print(f\"‚ùå Unexpected error: {e}\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## üîß Check Vector Store\n",
                "\n",
                "Let's verify the vector store exists and is accessible for the RAG system."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Check if vector store exists\n",
                "vector_store_path = \"../vector_store\"\n",
                "if os.path.exists(vector_store_path):\n",
                "    print(f\"‚úÖ Vector store found: {vector_store_path}\")\n",
                "    vector_store_files = os.listdir(vector_store_path)\n",
                "    print(f\"üìÅ Vector store files: {vector_store_files}\")\n",
                "    \n",
                "    # Check for essential vector store files\n",
                "    essential_files = ['complaint_index.faiss', 'chunks.pkl', 'metadata.pkl']\n",
                "    missing_essential = [f for f in essential_files if f not in vector_store_files]\n",
                "    \n",
                "    if missing_essential:\n",
                "        print(f\"‚ö†Ô∏è Missing essential files: {missing_essential}\")\n",
                "        print(\"üîç Please run Task 2 notebook first to create the complete vector store.\")\n",
                "    else:\n",
                "        print(\"‚úÖ Vector store is complete and ready for use!\")\n",
                "else:\n",
                "    print(f\"‚ùå Vector store not found: {vector_store_path}\")\n",
                "    print(\"üîç Please run Task 2 notebook first to create the vector store.\")\n",
                "    print(\"   Command: jupyter notebook notebooks/02_text_chunking_embedding_vectorstore.ipynb\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## üß™ Test Chat Session Management\n",
                "\n",
                "Let's test the basic chat session functionality."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Test chat session management if components are available\n",
                "try:\n",
                "    if 'ChatSession' in globals() and 'ChatMessage' in globals():\n",
                "        print(\"üöÄ Testing Chat Session Management...\")\n",
                "        \n",
                "        # Create a new chat session\n",
                "        session = ChatSession(\n",
                "            session_id=\"test_session_001\",\n",
                "            messages=[],\n",
                "            created_at=time.time()\n",
                "        )\n",
                "        \n",
                "        # Add some test messages\n",
                "        session.add_message(\"user\", \"What are common credit card issues?\")\n",
                "        session.add_message(\"assistant\", \"Based on the complaint data, common credit card issues include...\", \n",
                "                          sources=[{\"text\": \"Sample source 1\", \"score\": 0.85}], \n",
                "                          confidence=0.85)\n",
                "        \n",
                "        # Display session information\n",
                "        print(f\"‚úÖ Session created: {session.session_id}\")\n",
                "        print(f\"üìù Messages in session: {len(session.messages)}\")\n",
                "        print(f\"üïí Session created at: {datetime.fromtimestamp(session.created_at)}\")\n",
                "        \n",
                "        # Test history retrieval\n",
                "        history = session.get_history()\n",
                "        print(f\"üìö Chat history pairs: {len(history)}\")\n",
                "        \n",
                "        # Test session export\n",
                "        session_data = session.export_to_dict()\n",
                "        print(f\"üíæ Session exported with {len(session_data)} keys\")\n",
                "        \n",
                "        print(\"‚úÖ Chat session management test completed successfully!\")\n",
                "        \n",
                "    else:\n",
                "        print(\"‚ö†Ô∏è Chat session components not available for testing\")\n",
                "        \n",
                "except Exception as e:\n",
                "    print(f\"‚ùå Error during chat session test: {e}\")\n",
                "    print(\"üîç Please check the import statements above.\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## üé® Test Response Formatting\n",
                "\n",
                "Let's test the response formatting capabilities."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Test response formatting if components are available\n",
                "try:\n",
                "    if 'GradioResponseFormatter' in globals():\n",
                "        print(\"üöÄ Testing Response Formatting...\")\n",
                "        \n",
                "        # Create a formatter instance\n",
                "        formatter = GradioResponseFormatter()\n",
                "        \n",
                "        # Create a mock RAG response for testing\n",
                "        from dataclasses import dataclass\n",
                "        \n",
                "        @dataclass\n",
                "        class MockSearchResult:\n",
                "            text: str\n",
                "            score: float\n",
                "            metadata: dict\n",
                "            chunk_id: int\n",
                "        \n",
                "        @dataclass\n",
                "        class MockRAGResponse:\n",
                "            answer: str\n",
                "            retrieved_sources: list\n",
                "            confidence_score: float\n",
                "            processing_time: float\n",
                "            query: str\n",
                "            context_used: str\n",
                "        \n",
                "        # Create mock data\n",
                "        mock_sources = [\n",
                "            MockSearchResult(\n",
                "                text=\"Customer reported unauthorized charges on credit card statement\",\n",
                "                score=0.92,\n",
                "                metadata={\"category\": \"fraud\", \"product\": \"credit_card\"},\n",
                "                chunk_id=1\n",
                "            ),\n",
                "            MockSearchResult(\n",
                "                text=\"Billing dispute over late payment fees\",\n",
                "                score=0.87,\n",
                "                metadata={\"category\": \"billing\", \"product\": \"credit_card\"},\n",
                "                chunk_id=2\n",
                "            )\n",
                "        ]\n",
                "        \n",
                "        mock_response = MockRAGResponse(\n",
                "            answer=\"Based on the complaint data, common credit card issues include unauthorized charges and billing disputes over late payment fees.\",\n",
                "            retrieved_sources=mock_sources,\n",
                "            confidence_score=0.89,\n",
                "            processing_time=1.23,\n",
                "            query=\"What are common credit card issues?\",\n",
                "            context_used=\"Sample context\"\n",
                "        )\n",
                "        \n",
                "        # Test formatting\n",
                "        try:\n",
                "            formatted_response = formatter.format_response(mock_response)\n",
                "            print(\"‚úÖ Response formatting test completed!\")\n",
                "            print(f\"üìù Formatted response length: {len(formatted_response)} characters\")\n",
                "            \n",
                "            # Test source formatting\n",
                "            formatted_sources = formatter.format_sources(mock_sources)\n",
                "            print(f\"üìö Sources formatted successfully: {len(formatted_sources)} characters\")\n",
                "            \n",
                "        except Exception as format_error:\n",
                "            print(f\"‚ö†Ô∏è Formatting test had issues: {format_error}\")\n",
                "            print(\"This might be expected if the formatter expects different data structures\")\n",
                "        \n",
                "    else:\n",
                "        print(\"‚ö†Ô∏è Response formatter not available for testing\")\n",
                "        \n",
                "except Exception as e:\n",
                "    print(f\"‚ùå Error during response formatting test: {e}\")\n",
                "    print(\"üîç Please check the import statements above.\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## üîå Test RAG Pipeline Integration\n",
                "\n",
                "Let's test the integration with the RAG pipeline."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Test RAG pipeline integration if components are available\n",
                "try:\n",
                "    if 'create_simple_pipeline' in globals():\n",
                "        print(\"üöÄ Testing RAG Pipeline Integration...\")\n",
                "        \n",
                "        # Check if vector store exists\n",
                "        vector_store_path = \"../vector_store\"\n",
                "        if os.path.exists(vector_store_path):\n",
                "            print(f\"‚úÖ Vector store found: {vector_store_path}\")\n",
                "            \n",
                "            try:\n",
                "                # Try to create pipeline\n",
                "                pipeline = create_simple_pipeline(vector_store_path)\n",
                "                print(\"‚úÖ RAG Pipeline created successfully!\")\n",
                "                print(\"üöÄ Ready to test the chat interface!\")\n",
                "                \n",
                "                # Test a simple query\n",
                "                test_query = \"What are common credit card complaints?\"\n",
                "                print(f\"üîç Test Query: {test_query}\")\n",
                "                \n",
                "                # Note: We won't run the actual query here to avoid long processing\n",
                "                # but we can verify the pipeline is ready\n",
                "                print(\"‚úÖ RAG pipeline integration test completed!\")\n",
                "                \n",
                "            except Exception as pipeline_error:\n",
                "                print(f\"‚ö†Ô∏è Pipeline creation had issues: {pipeline_error}\")\n",
                "                print(\"This might be due to missing dependencies or configuration\")\n",
                "        else:\n",
                "            print(f\"‚ùå Vector store not found: {vector_store_path}\")\n",
                "            print(\"üîç Please run Task 2 notebook first to create the vector store.\")\n",
                "            \n",
                "    else:\n",
                "        print(\"‚ö†Ô∏è RAG pipeline function not available for testing\")\n",
                "        print(\"Please check the import statements above.\")\n",
                "        \n",
                "except Exception as e:\n",
                "    print(f\"‚ùå Error during RAG pipeline integration test: {e}\")\n",
                "    print(\"üîç Please check the import statements above.\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## üéØ Interactive Chat Demo\n",
                "\n",
                "Now let's create a simple interactive chat demo using the available components."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Create an interactive chat demo\n",
                "def create_simple_chat_demo():\n",
                "    \"\"\"Create a simple interactive chat demo.\"\"\"\n",
                "    \n",
                "    if 'ChatSession' not in globals():\n",
                "        print(\"‚ùå Chat session components not available\")\n",
                "        return\n",
                "    \n",
                "    print(\"üéÆ Interactive Chat Demo\")\n",
                "    print(\"=\" * 50)\n",
                "    \n",
                "    # Create a new chat session\n",
                "    session = ChatSession(\n",
                "        session_id=f\"demo_session_{int(time.time())}\",\n",
                "        messages=[],\n",
                "        created_at=time.time()\n",
                "    )\n",
                "    \n",
                "    # Pre-defined responses for demo purposes\n",
                "    demo_responses = {\n",
                "        \"hello\": \"Hello! I'm your Financial Complaint Analysis AI assistant. How can I help you today?\",\n",
                "        \"credit card\": \"Based on the complaint data, common credit card issues include billing disputes, unauthorized charges, and customer service problems.\",\n",
                "        \"mortgage\": \"Mortgage-related complaints often involve servicing issues, payment processing, and loan modification difficulties.\",\n",
                "        \"help\": \"I can help you analyze financial complaints, find patterns, and answer questions about consumer financial issues.\",\n",
                "        \"bye\": \"Thank you for using the Financial Complaint Analysis system. Have a great day!\"\n",
                "    }\n",
                "    \n",
                "    print(\"üí° Type 'help' for assistance, 'bye' to exit, or ask a question about financial complaints.\")\n",
                "    print(\"üìù Example questions:\")\n",
                "    print(\"   - What are common credit card issues?\")\n",
                "    print(\"   - How do customers resolve billing disputes?\")\n",
                "    print(\"   - What are the main security concerns?\")\n",
                "    print(\"-\" * 50)\n",
                "    \n",
                "    # Simple chat loop\n",
                "    while True:\n",
                "        try:\n",
                "            user_input = input(\"üë§ You: \").strip().lower()\n",
                "            \n",
                "            if user_input == 'bye':\n",
                "                print(\"ü§ñ AI: Goodbye!\")\n",
                "                break\n",
                "            elif user_input == 'help':\n",
                "                print(\"ü§ñ AI: I'm here to help! I can analyze financial complaints and answer your questions.\")\n",
                "                print(\"   Try asking about credit cards, mortgages, billing, or any financial product.\")\n",
                "            elif user_input in demo_responses:\n",
                "                response = demo_responses[user_input]\n",
                "                print(f\"ü§ñ AI: {response}\")\n",
                "                \n",
                "                # Add to session\n",
                "                session.add_message(\"user\", user_input)\n",
                "                session.add_message(\"assistant\", response)\n",
                "            else:\n",
                "                # Generic response for unknown inputs\n",
                "                response = \"I understand you're asking about financial complaints. In a real RAG system, I would search the complaint database and provide specific, evidence-based answers.\"\n",
                "                print(f\"ü§ñ AI: {response}\")\n",
                "                \n",
                "                # Add to session\n",
                "                session.add_message(\"user\", user_input)\n",
                "                session.add_message(\"assistant\", response)\n",
                "            \n",
                "            print()\n",
                "            \n",
                "        except KeyboardInterrupt:\n",
                "            print(\"\\nü§ñ AI: Chat session interrupted. Goodbye!\")\n",
                "            break\n",
                "        except Exception as e:\n",
                "            print(f\"‚ùå Error: {e}\")\n",
                "            break\n",
                "    \n",
                "    # Display session summary\n",
                "    print(\"\\nüìä Chat Session Summary\")\n",
                "    print(\"=\" * 30)\n",
                "    print(f\"Session ID: {session.session_id}\")\n",
                "    print(f\"Total Messages: {len(session.messages)}\")\n",
                "    print(f\"Duration: {time.time() - session.created_at:.1f} seconds\")\n",
                "    \n",
                "    return session\n",
                "\n",
                "# Run the demo if components are available\n",
                "if 'ChatSession' in globals():\n",
                "    print(\"üöÄ Starting Interactive Chat Demo...\")\n",
                "    print(\"Note: This is a simplified demo. The full system would use the actual RAG pipeline.\")\n",
                "    print()\n",
                "    \n",
                "    # Uncomment the line below to run the interactive demo\n",
                "    # demo_session = create_simple_chat_demo()\n",
                "    print(\"üí° To run the interactive demo, uncomment the line: demo_session = create_simple_chat_demo()\")\n",
                "else:\n",
                "    print(\"‚ö†Ô∏è Chat session components not available for demo\")\n",
                "    print(\"Please check the import statements above.\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## üöÄ Streamlit Web Interface\n",
                "\n",
                "The system also includes a Streamlit-based web interface. Here's how to use it:"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Instructions for running the Streamlit web interface\n",
                "print(\"üåê Streamlit Web Interface Instructions\")\n",
                "print(\"=\" * 50)\n",
                "print(\"\\nTo run the full web interface:\")\n",
                "print(\"1. Open a terminal/command prompt\")\n",
                "print(\"2. Navigate to the project directory\")\n",
                "print(\"3. Run: streamlit run src/ui_app.py\")\n",
                "print(\"4. Open your browser to the provided URL\")\n",
                "print(\"\\nFeatures of the web interface:\")\n",
                "print(\"‚úÖ Real-time chat with the RAG system\")\n",
                "print(\"‚úÖ Source citation and confidence scoring\")\n",
                "print(\"‚úÖ Interactive configuration options\")\n",
                "print(\"‚úÖ Chat history and session management\")\n",
                "print(\"‚úÖ Example questions and suggestions\")\n",
                "print(\"\\nRequirements:\")\n",
                "print(\"üì¶ streamlit (install with: pip install streamlit)\")\n",
                "print(\"üì¶ All other dependencies from requirements.txt\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## üîß Configuration Options\n",
                "\n",
                "The chat interface supports various configuration options:"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Display configuration options\n",
                "print(\"‚öôÔ∏è Chat Interface Configuration Options\")\n",
                "print(\"=\" * 50)\n",
                "print(\"\\nüìä RAG Pipeline Settings:\")\n",
                "print(\"   ‚Ä¢ top_k: Number of sources to retrieve (1-10)\")\n",
                "print(\"   ‚Ä¢ similarity_threshold: Minimum similarity score for sources\")\n",
                "print(\"   ‚Ä¢ max_context_length: Maximum context length for LLM\")\n",
                "print(\"   ‚Ä¢ temperature: LLM response creativity (0.0-1.0)\")\n",
                "print(\"   ‚Ä¢ max_tokens: Maximum response length\")\n",
                "print(\"\\nüé® Display Options:\")\n",
                "print(\"   ‚Ä¢ show_sources: Display source citations\")\n",
                "print(\"   ‚Ä¢ show_metadata: Display source metadata\")\n",
                "print(\"   ‚Ä¢ show_confidence: Display confidence scores\")\n",
                "print(\"   ‚Ä¢ response_format: Choose response style\")\n",
                "print(\"\\nüíæ Session Management:\")\n",
                "print(\"   ‚Ä¢ auto_save: Automatically save chat sessions\")\n",
                "print(\"   ‚Ä¢ export_format: CSV, JSON, or Markdown\")\n",
                "print(\"   ‚Ä¢ session_timeout: Automatic session cleanup\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## üìù Example Usage Patterns\n",
                "\n",
                "Here are some common usage patterns for the chat interface:"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Example usage patterns\n",
                "print(\"üìù Example Usage Patterns\")\n",
                "print(\"=\" * 40)\n",
                "print(\"\\nüîç Information Retrieval:\")\n",
                "print(\"   User: 'What are the most common credit card complaints?'\")\n",
                "print(\"   System: Searches database, retrieves relevant sources, generates answer\")\n",
                "print(\"\\nüìä Trend Analysis:\")\n",
                "print(\"   User: 'Have mortgage complaints increased over time?'\")\n",
                "print(\"   System: Analyzes temporal patterns, provides trend insights\")\n",
                "print(\"\\nüîí Security Issues:\")\n",
                "print(\"   User: 'What are the main security concerns with online banking?'\")\n",
                "print(\"   System: Identifies security-related complaints, categorizes by type\")\n",
                "print(\"\\nüí≥ Product Comparison:\")\n",
                "print(\"   User: 'How do credit card complaints compare to mortgage complaints?'\")\n",
                "print(\"   System: Compares complaint patterns across product categories\")\n",
                "print(\"\\nüõ†Ô∏è Resolution Guidance:\")\n",
                "print(\"   User: 'How do customers typically resolve billing disputes?'\")\n",
                "print(\"   System: Provides resolution patterns and success strategies\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## üß™ Testing and Validation\n",
                "\n",
                "Here are some ways to test and validate the chat interface:"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Testing and validation guidelines\n",
                "print(\"üß™ Testing and Validation Guidelines\")\n",
                "print(\"=\" * 45)\n",
                "print(\"\\n‚úÖ Functional Testing:\")\n",
                "print(\"   ‚Ä¢ Test basic chat functionality\")\n",
                "print(\"   ‚Ä¢ Verify source retrieval and citation\")\n",
                "print(\"   ‚Ä¢ Check response formatting\")\n",
                "print(\"   ‚Ä¢ Test session management\")\n",
                "print(\"\\nüîç Quality Testing:\")\n",
                "print(\"   ‚Ä¢ Verify answer relevance and accuracy\")\n",
                "print(\"   ‚Ä¢ Check source quality and relevance\")\n",
                "print(\"   ‚Ä¢ Validate confidence scoring\")\n",
                "print(\"   ‚Ä¢ Test response completeness\")\n",
                "print(\"\\n‚ö° Performance Testing:\")\n",
                "print(\"   ‚Ä¢ Measure response times\")\n",
                "print(\"   ‚Ä¢ Test with different query types\")\n",
                "print(\"   ‚Ä¢ Validate memory usage\")\n",
                "print(\"   ‚Ä¢ Check scalability limits\")\n",
                "print(\"\\nüîÑ Integration Testing:\")\n",
                "print(\"   ‚Ä¢ Test RAG pipeline integration\")\n",
                "print(\"   ‚Ä¢ Verify vector store connectivity\")\n",
                "print(\"   ‚Ä¢ Check error handling\")\n",
                "print(\"   ‚Ä¢ Test configuration changes\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## üöÄ Next Steps\n",
                "\n",
                "Now that you have a working chat interface, here are the next steps:"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Next steps and recommendations\n",
                "print(\"üöÄ Next Steps and Recommendations\")\n",
                "print(\"=\" * 45)\n",
                "print(\"\\n1. üß™ Test the Basic System:\")\n",
                "print(\"   ‚Ä¢ Run the interactive demo above\")\n",
                "print(\"   ‚Ä¢ Test with various question types\")\n",
                "print(\"   ‚Ä¢ Verify source retrieval works\")\n",
                "print(\"\\n2. üåê Launch the Web Interface:\")\n",
                "print(\"   ‚Ä¢ Run: streamlit run src/ui_app.py\")\n",
                "print(\"   ‚Ä¢ Test the full web interface\")\n",
                "print(\"   ‚Ä¢ Explore configuration options\")\n",
                "print(\"\\n3. üîß Optimize Performance:\")\n",
                "print(\"   ‚Ä¢ Adjust RAG parameters\")\n",
                "print(\"   ‚Ä¢ Fine-tune response formatting\")\n",
                "print(\"   ‚Ä¢ Optimize source retrieval\")\n",
                "print(\"\\n4. üìä Evaluate and Improve:\")\n",
                "print(\"   ‚Ä¢ Use the evaluation framework from Task 3\")\n",
                "print(\"   ‚Ä¢ Collect user feedback\")\n",
                "print(\"   ‚Ä¢ Iterate on response quality\")\n",
                "print(\"\\n5. üöÄ Deploy and Scale:\")\n",
                "print(\"   ‚Ä¢ Deploy to production environment\")\n",
                "print(\"   ‚Ä¢ Add monitoring and logging\")\n",
                "print(\"   ‚Ä¢ Scale for multiple users\")\n",
                "print(\"\\nüéØ Congratulations! You now have a fully functional\")\n",
                "print(\"   Financial Complaint Analysis RAG system with an\")\n",
                "print(\"   interactive chat interface!\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## üìö Additional Resources\n",
                "\n",
                "For more information and advanced usage:"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Additional resources and references\n",
                "print(\"üìö Additional Resources and References\")\n",
                "print(\"=\" * 50)\n",
                "print(\"\\nüìñ Documentation:\")\n",
                "print(\"   ‚Ä¢ Streamlit: https://docs.streamlit.io/\")\n",
                "print(\"   ‚Ä¢ Gradio: https://gradio.app/docs/\")\n",
                "print(\"   ‚Ä¢ RAG Systems: https://python.langchain.com/docs/use_cases/question_answering/\")\n",
                "print(\"\\nüîß Advanced Features:\")\n",
                "print(\"   ‚Ä¢ Multi-turn conversations\")\n",
                "print(\"   ‚Ä¢ Context window management\")\n",
                "print(\"   ‚Ä¢ Response streaming\")\n",
                "print(\"   ‚Ä¢ Custom prompt engineering\")\n",
                "print(\"\\nüöÄ Deployment Options:\")\n",
                "print(\"   ‚Ä¢ Streamlit Cloud\")\n",
                "print(\"   ‚Ä¢ Heroku\")\n",
                "print(\"   ‚Ä¢ AWS/GCP/Azure\")\n",
                "print(\"   ‚Ä¢ Docker containers\")\n",
                "print(\"\\nüí° Best Practices:\")\n",
                "print(\"   ‚Ä¢ Error handling and user feedback\")\n",
                "print(\"   ‚Ä¢ Security and input validation\")\n",
                "print(\"   ‚Ä¢ Performance monitoring\")\n",
                "print(\"   ‚Ä¢ User experience optimization\")"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "value": "ipython"
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.8.0"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4
}

# Write the notebook to file
with open('notebooks/04_interactive_chat_interface.ipynb', 'w', encoding='utf-8') as f:
    json.dump(notebook, f, indent=1, ensure_ascii=False)

print("‚úÖ Interactive Chat Interface notebook created successfully!")
print("üìÅ Location: notebooks/04_interactive_chat_interface.ipynb")
print("üöÄ You can now open and run this notebook in Jupyter!")
